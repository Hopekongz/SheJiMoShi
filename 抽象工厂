2.抽象工厂模式（Abstract Factory Pattern）
抽象工厂模式是一种创建型设计模式，它提供了一种将一组相关或相互依赖的对象创建的接口，而无需指定其具体类的方式。抽象工厂模式通过将产品的创建抽象成一个工厂接口，让具体的工厂子类实现该接口来创建不同种类的产品。

应用场景：

当系统需要一组相互关联的对象，并希望统一创建这组对象时，抽象工厂模式非常适用。它允许客户端使用抽象的接口来创建一组相关的产品，从而实现松耦合，并且能够方便地更换不同的产品组合。

示例：

假设我们要创建一个跨平台的图形用户界面（GUI），其中包括按钮（Button）和文本框（TextField）两种组件，分别有Windows和Mac两种风格的实现。

首先，定义抽象产品接口：
// 抽象按钮接口
interface Button {
    void render();
}

// 抽象文本框接口
interface TextField {
    void display();
}

// Windows 风格按钮实现
class WindowsButton implements Button {
    @Override
    public void render() {
        System.out.println("渲染Windows风格的按钮");
    }
}

// Windows 风格文本框实现
class WindowsTextField implements TextField {
    @Override
    public void display() {
        System.out.println("显示Windows风格的文本框");
    }
}

// Mac 风格按钮实现
class MacButton implements Button {
    @Override
    public void render() {
        System.out.println("渲染Mac风格的按钮");
    }
}

// Mac 风格文本框实现
class MacTextField implements TextField {
    @Override
    public void display() {
        System.out.println("显示Mac风格的文本框");
    }
}

// 抽象工厂接口
interface GUIFactory {
    Button createButton();
    TextField createTextField();
}

// 客户端代码
public class Client {
    public static void main(String[] args) {
        GUIFactory windowsFactory = new WindowsGUIFactory();
        Button windowsButton = windowsFactory.createButton();
        TextField windowsTextField = windowsFactory.createTextField();

        GUIFactory macFactory = new MacGUIFactory();
        Button macButton = macFactory.createButton();
        TextField macTextField = macFactory.createTextField();

        windowsButton.render(); // 输出：渲染Windows风格的按钮
        windowsTextField.display(); // 输出：显示Windows风格的文本框

        macButton.render(); // 输出：渲染Mac风格的按钮
        macTextField.display(); // 输出：显示Mac风格的文本框
    }
}
